# -*- coding: utf-8 -*-
# vim: ft=yaml
---
include:
  - project: EOLE/infra/ci-tools
    ref: stable
    file: /templates/Rules.yaml
  - project: EOLE/infra/ci-tools
    ref: stable
    file: /templates/Runners/apps.education-docker.yaml
  - project: EOLE/infra/ci-tools
    ref: stable
    file: /templates/Lint/Commitlint.yaml
  - project: EOLE/infra/ci-tools
    ref: stable
    file: /templates/Release/Semantic-release.yaml
  - project: EOLE/infra/ci-tools
    ref: stable
    file: /templates/Docker.yaml

variables:
  # `ci-tools` default branch is `stable`
  STABLE_BRANCH: master
  IMAGE_NAME: sondage

stages:
  - initial-checks
  - deps
  - test
  - build
  - release

# Common setup for all meteor based jobs
.meteor:
  extends: .not-on-stable
  image: hub.eole.education/proxyhub/geoffreybooth/meteor-base:2.5
  cache:
    key:
      files:
        # Generate new cache when one of the file changes
        - package.json
        - package-lock.json
    paths:
      - node_modules/
    # Only use the cache created by `cache-dependencies` job
    policy: pull
  variables:
    METEOR_ALLOW_SUPERUSER: "true"


###############################################################################
# `initial-checks` stage: `commitlint`
###############################################################################
# Execute `commitlint` before long `cache-dependencies` job
commitlint:
  stage: initial-checks


###############################################################################
# `deps` stage: to download and cache dependencies
###############################################################################
cache-dependencies:
  stage: deps
  extends: .meteor
  cache:
    # This job update dependencies
    policy: pull-push
  script:
    - meteor npm ci


###############################################################################
# `test` stage: `meteor-lint`, `meteor-tests`
###############################################################################
# The test does not run on the builded container so do them before
# building the container
meteor-lint:
  stage: test
  extends: .meteor
  script:
    - meteor npm install --only=dev
    - meteor npm run lint

meteor-tests:
  stage: test
  extends: .meteor
  script:
    - meteor npm test


###############################################################################
# `build` stage: `build-docker`
###############################################################################
# Build on release tag and every branches except for `$STABLE_BRANCH`
# used only to create the release tag.
#
# The ordering is important:
# 1. exclude schedules and drafts
# 2. include `on-release-tag` which must match before `not-on-semantic-release-commit`
# 3. we exclude stable which just produce the release tag
# 4. we exclude `semantic-release` commits like when merging `release` on `dev`
# 5. run on every branches
build-docker:
  extends: .build-docker-image
  rules:
    - !reference [.rules-map, not-on-schedule]
    - !reference [.rules-map, not-on-draft]
    - !reference [.rules-map, on-release-tag]
    - !reference [.rules-map, not-on-stable]
    - !reference [.rules-map, not-on-semantic-release-commit]
    - !reference [.rules-map, on-branch]


###############################################################################
# `release` stage: `semantic-release`
###############################################################################
